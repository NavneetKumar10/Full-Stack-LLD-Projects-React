
## React Class 1 Notes

### Introduction to React
- **React**: A JavaScript library for building user interfaces, primarily for single-page applications.
- **Components**: The building blocks of a React application. They can be functional or class-based.

### Functional Components
- **Functional Components**: Simple functions that return JSX. They do not have their own state or lifecycle methods.
  ```javascript
  const MyComponent = () => {
    return <div>Hello, World!</div>;
  };
  ```

### JSX
- **JSX**: A syntax extension for JavaScript, used with React to describe what the UI should look like.
  ```javascript
  const element = <h1>Hello, world!</h1>;
  ```

### Props
- **Props (Properties)**: Used to pass data from parent components to child components.
  ```javascript
  const Greeting = (props) => {
    return <h1>Hello, {props.name}!</h1>;
  };
  ```

### useState Hook
- **useState**: A React hook that lets you add state to functional components.
  ```javascript
  import React, { useState } from 'react';

  const Counter = () => {
    const [count, setCount] = useState(0);
    return (
      <div>
        <p>{count}</p>
        <button onClick={() => setCount(count + 1)}>Increment</button>
      </div>
    );
  };
  ```

### useEffect Hook
- **useEffect**: A React hook that lets you perform side effects in functional components.
  ```javascript
  import React, { useEffect } from 'react';

  const MyComponent = () => {
    useEffect(() => {
      console.log('Component mounted or updated');
    }, []);
    return <div>My Component</div>;
  };
  ```

### Event Handling
- **Event Handling**: Handling events such as clicks, form submissions, etc., in React components.
  ```javascript
  const handleClick = () => {
    console.log('Button clicked');
  };

  return <button onClick={handleClick}>Click Me</button>;
  ```

---

## React Class 1 - Assignment Questions and Answers

### Question 1
**What does the below code log to the console?**

```javascript
const fetchData = async () => {
  const response = await fetch('https://api.example.com/data');
  const data = await response.json();
  return data;
};

const result = fetchData();
console.log(result);
```

**Options:**
- The fetched data as an object.
- The Promise object.
- An error.
- Undefined.

**Answer:** 
- The Promise object.

### Question 2
**What does the below code log to the console?**

```javascript
const fetchData = async (page) => {
  const response = await fetch(`https://api.example.com/data?page=${page}`);
  const data = await response.json();
  return data;
};

const result = fetchData(1);
```

**Options:**
- Fetches data from the API's first page.
- Fetches data from the API's second page.
- Fetches data from the API based on the given page number.
- Fetches all the data from the API.

**Answer:** 
- Fetches data from the API based on the given page number.

### Question 3
**What is rendered by the MyComponent component while the data is being fetched?**

```javascript
import React, { useState, useEffect } from 'react';

const MyComponent = () => {
  const [data, setData] = useState(null);

  useEffect(() => {
    fetchData().then((response) => setData(response));
  }, []);

  const fetchData = async () => {
    const response = await fetch('https://api.example.com/data');
    const data = await response.json();
    return data;
  };

  return <div>{data ? <p>Data loaded!</p> : <p>Loading...</p>}</div>;
};
```

**Options:**
- Data loaded!
- Loading...
- null
- Undefined

**Answer:** 
- Loading...

### Question 4
**What is the purpose of using useCallback in the increment function?**

```javascript
import React, { useState, useCallback } from 'react';

const MyComponent = () => {
  const [count, setCount] = useState(0);

  const increment = useCallback(() => {
    setCount(count + 1);
  }, [count]);

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={increment}>Increment</button>
    </div>
  );
};
```

**Options:**
- It prevents unnecessary re-rendering of the component.
- It caches the `increment` function for optimal performance.
- It ensures that the `increment` function has access to the latest `count` value.
- None of the above.

**Answer:** 
- It ensures that the `increment` function has access to the latest `count` value.

### Question 5
**What is the purpose of using useMemo in the sum calculation?**

```javascript
import React, { useMemo } from 'react';

const MyComponent = ({ data }) => {
  const sum = useMemo(() => {
    return data.reduce((acc, curr) => acc + curr, 0);
  }, [data]);

  return <p>Sum: {sum}</p>;
};
```

**Options:**
- It prevents unnecessary re-rendering of the component.
- It caches the `sum` calculation for optimal performance.
- It ensures that the `sum` calculation is correct.
- None of the above.

**Answer:** 
- It caches the `sum` calculation for optimal performance.

### Question 6
**What happens when the MyComponent component is rendered?**

```javascript
import React, { useRef, useEffect } from 'react';

const MyComponent = () => {
  const inputRef = useRef(null);

  useEffect(() => {
    inputRef.current.focus();
  }, []);

  return <input ref={inputRef} type="text" />;
};
```

**Options:**
- The input field receives focus automatically.
- An error occurs because `inputRef` is not assigned correctly.
- The input field is empty.
- None of the above.

**Answer:** 
- The input field receives focus automatically.

### Question 7
**What will be rendered to the screen by the MyComponent component?**

```javascript
import React from 'react';

const MyComponent = ({ name, age }) => {
  return (
    <div>
      <h1>{name}</h1>
      <p>{age} years old</p>
    </div>
  );
};

const App = () => {
  const person = { name: 'John', age: 25 };
  return <MyComponent {...person} />;
};
```

**Options:**
- Error: Cannot spread object 'person' in JSX.
- John 25 years old
- Undefined
- Error: 'name' and 'age' props are missing.

**Answer:** 
- John 25 years old

### Question 8
**What will be rendered to the screen by the MyComponent component?**

```javascript
import React from 'react';

const MyComponent = ({ items }) => {
  return (
    <ul>
      {items.map((item) => (
        <li key={item.id}>{item.name}</li>
      ))}
    </ul>
  );
};

const App = () => {
  const products = [
    { id: 1, name: 'Product A' },
    { id: 2, name: 'Product B' },
    { id: 3, name: 'Product C' },
  ];

  return <MyComponent items={products} />;
};
```

**Options:**
- Error: Each child in a list should have a unique "key" prop.
- Product A, Product B, Product C
- Undefined
- Error: 'items' prop is missing.

**Answer:** 
- Product A, Product B, Product C

### Question 9
**What is rendered by the MyComponent component?**

```javascript
import React, { useState, useEffect } from 'react';

const MyComponent = () => {
  const [data, setData] = useState([]);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    const response = await fetch('https://api.example.com/data');
    const result = await response.json();
    setData(result);
  };

  return (
    <ul>
      {data.map((item) => (
        <li key={item.id}>{item.name}</li>
      ))}
    </ul>
  );
};
```

**Options:**
- An empty unordered list (<ul></ul>).
- An error occurs because `data` is not assigned correctly.
- An unordered list with the fetched data's names as list items.
- None of the above.

**Answer:** 
- An unordered list with the fetched data's names as list items.

### Question 10
**What happens when the "Focus Input" button is clicked?**

```javascript
import React, { useRef } from 'react';

const MyComponent = () => {
  const inputRef = useRef();

  const handleButtonClick = () => {
    inputRef.current.focus();
  };

  return (
    <div>
      <input ref={inputRef} type="text" />
      <button onClick={handleButtonClick}>Focus Input</button

>
    </div>
  );
};
```

**Options:**
- The input field receives focus.
- An error occurs because `inputRef` is not assigned correctly.
- The button receives focus.
- None of the above.

**Answer:** 
- The input field receives focus.

---

Feel free to refer to these notes anytime you need a refresher on React Class 1 and its assignment questions! If you have any more questions or need further explanations, don't hesitate to ask.
